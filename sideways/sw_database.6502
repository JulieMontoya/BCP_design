\  DATABASE LIBRARY FOR PCB DESIGN -- SIDEWAYS RAM VERSION!

\  ORG IS NOW SET IN THE MAIN FILE FROM WHICH THIS GETS INCLUDED
\ ALIGN &100

.database_begin
.find_fp1
LDAfpbase
STAfpb
LDAfpbase+1
STAfpb+1
LDX#0
.findfp1
LDY#0
LDA(fpb),Y
CMP(ssb),Y
BEQmatch
.findfp2
LDAfpb
CLC
ADC#23
JSRextfpb
INX
CPXnfp
BCCfindfp1
RTS
.match
INY
._match1
LDA(fpb),Y
CMP#33
BCCfoundfp
CMP(ssb),Y
BNEfindfp2
INY
CPY#7
BNE_match1
.foundfp
CLC
STXfprt
RTS
.extfpb
STAfpb
LDAfpb+1
ADC#0
STAfpb+1
.database_rts
RTS
.init_cardbuf
LDA#cardbuf MOD256
STAcbb
LDA#cardbuf DIV256
STAcbb+1
RTS
.real_parse_card
JSRinit_cardbuf
LDY#0
._parse1
LDA(cbb),Y
CMP#65
BCC_notdes
CMP#126
BCC_found_des
._notdes
CMP#13
BEQendofcard
INY
BNE_parse1
.no_desr
LDX#128
EQUB&2C
.endofcard
LDX#129
SEC
RTS
.next_word
LDA(cbb),Y
CMP#13
BEQendofcard
CMP#48
BCC_nextwd1
CLC
RTS
._nextwd1
INY
BNEnext_word
BEQendofcard
.next_num
LDA(cbb),Y
CMP#13
BEQendofcard
CMP#45
BEQ_nn_minus
CMP#48
BCC_nextnum1
CMP#58
BCS_nextnum1
._nn_minus
RTS
._nextnum1
INY
BNEnext_num
BEQendofcard
._found_des
STYrefindex
.parse2
LDA(cbb),Y
CMP#42
BEQ_found_star
CMP#13
BEQno_star
INY
BNEparse2
.no_star
LDX#131
SEC
RTS
._found_star
STYrefindex+1
.find_fpn
INY
LDA(cbb),Y
CMP#13
BEQendofcard
CMP#33
BCCfind_fpn
._found_fpn
CLC
LDX#0
STYrefindex+1
TYA
JSRaddssb
LDA#0
JSRaddssb
JSRfind_fp1
BCC_valid_fp
RTS
.addssb
ADCcbb,X
STAssb,X
INX
RTS
._valid_fp
TYA
ADCrefindex+1
STArefindex+1
STXfprt
.get_pins0
LDY#7
LDA(fpb),Y
AND#127
STApins
RTS
.real_pack_desr
LDYrefindex
INY
LDA(cbb),Y
CMP#65
BCC_pd_1ltr
LDX#0
.findpair
CMPltrpairs+1,X
BNE_fp_nomatch
DEY
LDA(cbb),Y
INY
CMPltrpairs,X
BEQ_foundpair
LDA(cbb),Y
._fp_nomatch
INX
INX
CPX#64
BCCfindpair
RTS
._foundpair
TXA
LSRA
ORA#32
BNE_pd_save
RTS
._pd_1ltr
DEY
LDA(cbb),Y
AND#31
._pd_save
STArefindex+1
STAletter
INY
JSRparse_num
LDAdecnum+1
AND#3
STAdesP+1
LDAletter
ASLA
ASLA
ORAdesP+1
STAdesP+1
LDAdecnum
STAdesP
CLC
._pd_done
RTS
.real_parse_pin
LDYrefindex+1
JSRnext_num
BCS_pd_done
.parse_num
LDA#0
STAdecnum
STAdecnum+1
STAneg
._parse_num1
LDA(cbb),Y
CMP#45
BNEpn_notminus
LDA#255
STAneg
BNEpn_next
.pn_notminus
CMP#48
BCC_pn_notdigit
CMP#58
BCS_pn_notdigit
JSRtimes10
LDA(cbb),Y
SEC
SBC#48
CLC
ADCdecnum
STAdecnum
LDAdecnum+1
ADC#0
STAdecnum+1
.pn_next
INY
BNE_parse_num1
._pn_notdigit
STYrefindex+1
BITneg
BPL_pn_is_pos
LDX#decnum MOD256
JMPtwc16
._pn_is_pos
RTS
.times10
LDX#0
JSR_cpydn
JSR_dbldn
JSR_dbldn
LDX#0
CLC
JSR_add_dn
._dbldn
ASLdecnum
ROLdecnum+1
RTS
._cpydn
JSR_cpydn_1
._cpydn_1
LDAdecnum,X
STAdncpy,X
INX
RTS
._add_dn
JSR_add_dn1
._add_dn1
LDAdecnum,X
ADCdncpy,X
STAdecnum,X
INX
RTS
.real_parse_extra
JSRreal_parse_pin
BCS_px_eoc
LDX#decnum MOD256
LDY#cenX MOD256
JSRcopy_word
JSRreal_parse_pin
BCS_px_eoc
LDX#decnum MOD256
LDY#cenY MOD256
JSRcopy_word
JSRreal_parse_pin
BCS_px_eoc
LDAdecnum
AND#8
BNE_px_und
STApside
DECdecnum
BPL_px_savea
._px_und
LDA#1
STApside
INCdecnum
._px_savea
LDAdecnum
AND#3
STApangle
._px_eoc
RTS
.real_find_part
LDAplbase
STAplb
LDAplbase+1
STAplb+1
LDY#0
STYpart
._find_part1
LDA(plb),Y
CMPdesP
BNE_find_part2
INY
LDA(plb),Y
DEY
CMPdesP+1
BEQ_find_part3
._find_part2
CLC
LDAplb
ADC#8
STAplb
LDAplb+1
ADC#0
STAplb+1
INCpart
LDApart
CMPnparts
BNE_find_part1
SEC
RTS
._find_part3
CLC
RTS
.search_node
STAnod
JSRrewind_pl
.sn_newpart
LDApart
JSRreal_select_part
NOP:NOP:NOP
NOP:NOP:NOP
NOP:NOP:NOP
LDY#0
.sn_newpin
TYA
NOP:NOP:NOP
TAY
LDA(wlb),Y
CMPnod
BEQsn_match
.sn_res1
INY
.sn_res2
CPYpins
BCCsn_newpin
INCpart
LDApart
CMPnparts
BCSsn_hitend
CLC
LDAplb
ADC#8
STAplb
BCCsn_newpart
INCplb+1
BNEsn_newpart
.sn_hitend
CLC
RTS
.sn_match
STYpin
TYA
JSRselect_pin
NOP:NOP
NOP:NOP:NOP
NOP:NOP:NOP
SEC
RTS
.sn_resume
LDYpin
JMPsn_res1
.sn_repeat
LDYpin
JMPsn_res2
CLC
RTS
.rewind_wl
LDAwlbase
STAwlb
LDAwlbase+1
STAwlb+1
RTS
.parse_pap
JSRreal_pack_desr
BCC_ppap1
._ppap_exit
RTS
._ppap1
STYrefindex+1
JSRreal_find_part
BCS_ppap_exit
.p_pap2
LDYrefindex+1
JSRnext_num
BCS_ppap_exit
JSRparse_num
BCS_ppap_exit
LDYdecnum
DEY
STYpin
.use_pap
LDApart
JSRreal_select_part
.use_pin
LDYpin
LDA(wlb),Y
STA&78
TYA
JSRselect_pin
CLC
RTS
.begin_route
LDY#0
LDA#5
STAdivisor
STYdivisor+1
EQUB &2C
._save_lc2
STA(wpb),Y
INY
STYrty
RTS
.save_pap
LDApart
LDYrty
JSR_save_lc2
LDApin
JSR_save_lc2
._save_lc3
LDA#&8F
BMI_save_lc2
.save_lchg
LDYrty
CPY#5
BPL_slc_not1st
LDY#0
JSRpack_lchg
LDY#4
RTS
._slc_not1st
DEY
LDA(wpb),Y
AND#&F0
CMP#&80
BNE_slc_std1
DEY
LDA(wpb),Y
BPL_slc_std2
DEY
JSRpack_lchg
INY
INY
RTS
._slc_std2
INY
._slc_std1
INY
JSRpack_lchg
LDA#&FF
JSRstore_rb
LDA#&8F
JMPstore_rb
.pack_lchg
LDXrt_width
LDArt_layer
JSRjoin_nybble_XA
.store_rb
STA(wpb),Y
INY
RTS
.rat_nest
TAX
LDApart
PHA
LDApin
PHA
TXA
JSRsearch_node
LDA#4
LDX#scrX MOD256
JSRdo_plot_XA
LDA#30
STAplotmode
._rat_nest1
JSRsn_resume
BCC_rat_nest2
LDX#scrX MOD256
JSRdo_plot_X
JMP_rat_nest1
._rat_nest2
LDA#70
LDX#scrX MOD256
JSRdo_plot_XA
PLA
STApin
PLA
STApart
RTS
.move_curs
CPY#90
BNE_not_left
SEC
LDAwkspace,X
SBCstep
STAwkspace,X
BCS_left1
DECwkspace+1,X
._left1
RTS
._not_left
CPY#88
BNE_not_right
CLC
LDAwkspace,X
ADCstep
STAwkspace,X
BCC_right1
INCwkspace+1,X
._right1
RTS
._not_right
CPY#47
BNE_not_down
SEC
LDAwkspace+2,X
SBCstep
STAwkspace+2,X
BCS_down1
DECwkspace+3,X
._down1
RTS
._not_down
CPY#58
BNE_not_up
CLC
LDAwkspace+2,X
ADCstep
STAwkspace+2,X
BCC_up1
INCwkspace+3,X
._up1
RTS
._not_up
CPY#48
BNE_not_0
LDY#3
BNEstep1
._not_0
CPY#58
BCS_not_step
CPY#55
BCC_not_step
TYA
SBC#55
TAY
.step1
LDAsteps,Y
STAstep
.step2
JMPtidy_XY
._not_step
RTS
.tidy_XY
TYA
PHA
LDAstep
JSRset_divisor
JSR_tidy1
INX
INX
JSR_tidy1
DEX
DEX
PLA
TAY
SEC
RTS
._tidy1
TXA
PHA
TAY
LDX#dividend
JSRseed_zpp
CLC
LDAdividend+1
BPL_tidy2
LDX#dividend
JSRtwc16_zp
SEC
._tidy2
JSRdivide_no_rem
PHP
LDAremainder
ASLA
CMPstep
BCC_tidy4
INCquotient
BNE_tidy4
INCquotient+1
._tidy4
PLP
JSRmult16
BCC_tidy3
LDX#dividend
JSRtwc16_zp
._tidy3
PLA
PHA
TAY
LDX#product
JSRzp_to_ws
PLA
TAX
CLC
RTS
.rotflip
CPY#53
BNE_not_5
LDA#0
BEQset_pside
._not_5
CPY#54
BNE_not_6
LDA#1
.set_pside
STApside
JMPselect_flip
._not_6
CPY#53
BCS_not_rot
CPY#49
BCC_not_rot
TYA
SBC#49
STApangle
JMPselect_rot
._not_rot
RTS
.real_pack_part
LDX#cenX MOD256
LDY#plotbuf MOD256
JSRdiv_coords
LDY#4
LDAplotbuf
STA(plb),Y
INY
LDAplotbuf+2
STA(plb),Y
INY
LDXplotbuf+1
LDAplotbuf+3
JSRjoin_nybble_XA
STA(plb),Y
INY
LDApside
LSRA
ORApangle
RORA
RORA
RORA
ORAfprt
STA(plb),Y
RTS
.save_rtvertex
LDX#absX MOD256
LDY#plotbuf MOD256
JSRdiv_coords
LDYrty
LDAplotbuf
STA(wpb),Y
INY
LDAplotbuf+2
STA(wpb),Y
INY
LDXplotbuf+1
LDAplotbuf+3
JSRjoin_nybble_XA
STA(wpb),Y
INY
STYrty
RTS
.real_select_rt
PHA
LDA#4
JSRset_multiplicand
PLA
LDX#rtb
LDY#route MOD256
JSRmult_with_pl
.sel_rt1
.seed_wpb
LDY#0
LDAwpbase
CLC
ADC(rtb),Y
STAwpb
INY
LDAwpbase+1
ADC(rtb),Y
STAwpb+1
RTS
.real_unpack_waypt
INY
INY
LDA(wpb),Y
TAX
LSRA
LSRA
LSRA
LSRA
CMP#8
BEQnot_xy
JSRunpxy_es
STAabsY+1
TXA
AND#&F
JSRunpxy_es
STAabsX+1
DEY
LDA(wpb),Y
STAabsY
DEY
LDA(wpb),Y
STAabsX
LDY#absX MOD256
JSRN_mult_coords
CLC
._unp_rt1
INY
INY
INY
RTS
.layer_ch
LDArt_width
STApv_width
LDArt_layer
STApv_layer
DEY
LDA(wpb),Y
TAX
LSRA
LSRA
LSRA
LSRA
CMPrt_layer
BEQlch1
BITrts
.lch1
STArt_layer
TXA
AND#&F
STArt_width
SEC
BCS_unp_rt1
.not_xy
DEY
LDA(wpb),Y
BMIlayer_ch
STApin
DEY
LDA(wpb),Y
STYrty
STApart
JSRreal_select_part
LDApin
JSRselect_pin
LDYrty
CLC
BCC_unp_rt1
.real_select_fp
PHA
LDA#23
JSRset_multiplicand
LDX#fpb
LDY#fpbase MOD256
PLA
JSRmult_with_pl
LDY#7
LDA(fpb),Y
AND#&3F
STApins
JSRstore_bdy
.store_lgd
LDY#14
LDA#lgdX MOD256
JSR_store_bdy1
LDY#17
LDA(fpb),Y
ASLA
ROLA
ROLA
CLC
ADCpangle
AND#3
ASLA
ADCpside
TAX
LDAlgdmodes,X
STAlgdmode
RTS
.store_bdy
LDY#8
LDA#bdyL MOD256
JSR_store_bdy1
LDY#11
LDA#bdyR MOD256
JSR_store_bdy1
._store_bdy2
LDX#bdyR MOD256
LDY#bdyL MOD256
JSRmaybe_swp16
JMPmaybe_swp16
._store_bdy1
PHA
JSRunpackFP
JSRflip
JSRrotate
LDX#absX MOD256
PLA
TAY
JMPcopy_coords
.select_pin
PHA
LDX#pcb
LDY#pnbase MOD256
JSRseed_zpp
LDY#21
JSRaddfp_zpp
PLA
BEQ_is_pin1
JSR_addpin1
._is_pin1
.draw_pad
LDY#0
BEQ_draw_pad1
.next_pad
LDYpcy
._draw_pad1
JSRunpackXY
LDA(pcb),Y
INY
INY
STYpcy
.pad_ready
PHA
JSRconv_coords
PLA
RTS
._addpin1
LDX#5
JSRmult_AX
CLC
ADCpcb
STApcb
TXA
ADCpcb+1
STApcb+1
RTS
.real_select_part
PHA
LDA#8
JSRset_multiplicand
PLA
LDX#plb
LDY#plbase MOD256
JSRmult_with_pl
.unpack_part
LDY#0
LDA(plb),Y
STAdesP
INY
LDA(plb),Y
STAdesP+1
INY
JSRseed_wlb
LDA(plb),Y
STAcenX
INY
LDA(plb),Y
STAcenY
INY
LDA(plb),Y
JSRnybble_XA
JSRunpxy_es
STAcenY+1
TXA
JSRunpxy_es
STAcenX+1
INY
LDA(plb),Y
PHA
AND#&1F
STAfprt
PLA
ASLA
ROLA
ROLA
PHP
AND#3
STApangle
JSRselect_rot
PLP
LDA#0
ROLA
STApside
JSRselect_flip
LDY#cenX MOD256
JSRN_mult_coords
LDAfprt
JMPreal_select_fp
.seed_wlb0
LDY#2
.seed_wlb
CLC
LDX#0
JSRseed_wlb1
.seed_wlb1
LDA(plb),Y
INY
ADCwlbase,X
STAwlb,X
INX
RTS
.S_cmd
JSRreal_prep_save
LDX#plotbuf MOD256
LDY#plotbuf DIV256
LDA#0
JSR&FFDD
CLC
RTS
.L_cmd
JSRreal_prep_load
LDA#&FF
JSR_go_osfile
JSRreal_post_load
CLC
RTS
._go_osfile
LDX#plotbuf MOD256
LDY#plotbuf DIV256
JMP&FFDD
.real_calc_pnbase
.real_post_load
LDX#0
LDY#0
._cpn0
LDAdesign,X
STAfpbase,Y
INY
TYA
AND#1
TAX
CPY#8
BCC_cpn0
LDX#fpb
LDY#fpbase MOD256
JSRseed_zpp
LDX#fpbase MOD256
LDA#3
JSRadd8_16
LDY#1
LDA(fpb),Y
PHA
DEY
LDA(fpb),Y
STAnfp
LDX#23
JSRmult_AX
TAY
BEQ_cpn1
INX
._cpn1
TXA
LDY#fpbase MOD256+1
JSR_add_prev
PLA
JSRsplit_nybble_XA
JSR_add_prev
TXA
JSR_add_prev
._count_parts
LDX#plb
LDY#plbase MOD256
JSRseed_zpp
LDA#0
STAnparts
STAnnodes
TAY
._ctpts0
LDA(plb),Y
INY
ORA(plb),Y
BEQ_ctpts2
LDAplb
CLC
ADC#8
STAplb
BCC_ctpts1
INCplb+1
._ctpts1
LDY#0
INCnparts
BNE_ctpts0
._ctpts2
LDY#4
LDX#0
._add_plb
CLC
._add_plb1
LDA(plb),Y
ADCplbase,X
STAwlbase-4,Y
INY
TYA
AND#1
TAX
BNE_add_plb1
CPY#12
BCC_add_plb
JSRrewind_pl
LDApart
._ctnod0
JSRreal_select_part
LDAnnodes
LDY#0
._ctnod1
CMP(wlb),Y
BCS_ctnod2
LDA(wlb),Y
STAnnodes
._ctnod2
INY
CPYpins
BCC_ctnod1
INCpart
LDApart
CMPnparts
BCC_ctnod0
INCnnodes
LDX#rtb
LDY#route MOD256
JSRseed_zpp
LDA#0
STAnroutes
LDY#2
._cnt_rt1
LDA(rtb),Y
BEQ_cnt_rt2
LDArtb
CLC
ADC#4
STArtb
BCC_cnt_rt3
INCrtb+1
._cnt_rt3
INCnroutes
BNE_cnt_rt1
._cnt_rt2
RTS
._add_prev
CLC
ADCwkspace,Y
INY
INY
STAwkspace,Y
RTS
.real_prep_save
LDYrefindex
JSR_prep_fnp
LDX#plotbuf MOD256+2
JSRcopy_coords
JSRcopy_coords
LDX#desend MOD256
JSRcopy_word
LDX#moveX MOD256
JSRcopy_word
LDAnparts
JSRreal_select_part
LDY#4
LDX#0
._sub_plb
SEC
._sub_plb1
LDAwlbase-4,Y
SBCplbase,X
STA(plb),Y
INY
TYA
AND#1
TAX
BNE_sub_plb1
CPY#12
BCC_sub_plb
RTS
.real_prep_load
LDYrefindex
JSR_prep_fnp
LDA#0
TAY
.pld1
STAplotbuf+6,Y
INY
CPY#12
BCCpld1
RTS
._prep_fnp
TYA
PHA
LDY#plotbuf MOD256
LDX#cbb
JSRzp_to_ws
PLA
LDX#plotbuf MOD256
JSRadd8_16
LDX#design MOD256
LDY#plotbuf MOD256+2
JSRcopy_word
LDX#moveX MOD256
JMPcopy_word
.steps
EQUB5
EQUB25
EQUB50
EQUB100
.database_end

\SAVE "M.DBM58", database_begin, database_end, database_rts
