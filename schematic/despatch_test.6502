INCLUDE "workspace_page.6502"
INCLUDE "maths.6502"

\\  THIS IS THE ONLY ONE .....
ORG &4A00

.despatch_begin

.ext_despatch_cmd
    JMP despatch_cmd
.ext_rewind_cb
    JMP rewind_cb
.ext_skip_space
    JMP skip_space
.ext_pack_desr
    JMP pack_desr
    
.despatch_cmd
    JSR skip_space
.despatch_cmd0
    \ STY refindex+1      \  Save contents of Y
    LDX #0              \  X is pointer into despatch table
._dc_new_cmd
    LDY refindex+1      \  Y is pointer into card buffer
    LDA desp_table, X
    BEQ _dc_end_table
._dc_test
    LDA desp_table, X
    AND #&7F            \  Strip high bit
    CMP (cbb), Y
    BNE _dc_no_match
    LDA desp_table, X
    BMI _dc_match       \  Last char means we have a complete match
    INX                 \  Next char in despatch table
    INY                 \  Next char in command
    BNE _dc_test        \  Not expected to fall through
._dc_match
    INY                 \  Point to character *after* command
    STY refindex+1      \  Save Y
    LDA desp_table+1, X
    STA &70
    LDA desp_table+2, X
    STA &71
    CLC                 \  C=0 => match
    RTS
._dc_no_match
    LDA desp_table, X
    BMI _dc_end_cmd     \  High bit set indicates last char of command
    INX
    BNE _dc_no_match    \  Not expected to fall through
._dc_end_cmd
    INX                 \  Skip high-bit character
    INX                 \  Skip address low
    INX                 \  Skip address high
    BNE _dc_new_cmd     \  Not expected to fall through
._dc_end_table
    SEC                 \  C=1 => no match
    RTS
    
.skip_space
    LDY refindex+1
._ss1
    LDA (cbb), Y
    CMP #&0D            \  Will set C=1 if it is CR
    BEQ _ss_end
    CMP #&21            \  See if ! or later char
    BCS _ss_found
    INY
    BNE _ss1            \  Not expected to fall through
._ss_found
    STY refindex+1      \  Save updated pointer
    CLC                 \  C=0 => found something
._ss_end
    RTS
    
\

.rewind_cb
    LDY #0
    STY refindex+1
.rewind_cb0
    LDA #cardbuf MOD256
    STA cbb
    LDA #cardbuf DIV256
    STA cbb+1
    RTS

\  NEW STYLE DESPATCH TABLE HAS HIGH BIT SET IN LAST CHARACTER OF EACH
\  COMMAND, INSTEAD OF DELIMITER CHARACTERS.
\
\  N.B. LONG COMMANDS (WITH MODIFIER) MUST COME BEFORE SHORTER ONES!
\  

.desp_table             \ Address

    EQUS "A" : EQUB &D3 : EQUW AS_cmd       \  AS => Add Symbol
    EQUB &C1            : EQUW A_cmd        \  A => Add Part
    EQUB &C4            : EQUW D_cmd        \  D => Draw
    EQUS "M" : EQUB &CE : EQUW MN_cmd       \  MN => Move Next
    EQUB &CD            : EQUW M_cmd        \  M => Move
    BRK

\  FAKE JUMP TABLE TO KEEP IT HAPPY
\  WE MAY AS WELL START ON A PAGE BOUNDARY

ALIGN &100

.AS_cmd
    RTS
.A_cmd
    RTS
.D_cmd
    RTS
.L_cmd
    RTS
.MN_cmd
    RTS
.M_cmd
    RTS
.OL_cmd
    RTS
.OS_cmd
    RTS
.OV_cmd
    RTS
.RA_cmd
    RTS
.R_cmd
    RTS
.S_cmd
    RTS
.VD_cmd
    RTS
.VH_cmd
    RTS
.VL_cmd
    RTS
.VR_cmd
    RTS
.VU_cmd
    RTS
.V_cmd
    RTS
.WC_cmd
    RTS
.WE_cmd
    RTS
.WN_cmd
    RTS
.WO_cmd
    RTS
.WT_cmd
    RTS
.WU_cmd
    RTS
.W_cmd
    RTS
    
ALIGN &40

.pack_desr
    LDY refindex
    INY
    LDA (cbb), Y
    CMP #65
    BCC _pd_1ltr
    LDX #0
.findpair
    CMP ltrpairs+1, X
    BNE _fp_nomatch
    DEY
    LDA (cbb), Y
    INY
    CMP ltrpairs, X
    BEQ _foundpair
    LDA (cbb), Y
._fp_nomatch
    INX
    INX
    CPX #64
    BCC findpair
    RTS \ with C=1
._foundpair
    TXA
    LSR A
    ORA #32
    BNE _pd_save
    RTS \ with C=0
._pd_1ltr
    DEY
    LDA (cbb), Y
    AND #31
._pd_save
    STA refindex+1
    STA letter
    INY
    JSR parse_num
    LDA decnum+1
    AND #3
    STA desP+1
    LDA letter
    ASL A
    ASL A
    ORA desP+1
    STA desP+1
    LDA decnum
    STA desP
    CLC
._pd_done
    RTS

.parse_num
    LDA #0
    STA decnum
    STA decnum+1
    STAneg
._parse_num1
    LDA (cbb), Y
    CMP#45
    BNEpn_notminus
    LDA#255
    STAneg
    BNEpn_next
.pn_notminus
    CMP #48
    BCC _pn_notdigit
    CMP #58
    BCS _pn_notdigit
    JSR times10
    LDA (cbb), Y
    SEC
    SBC #48
    CLC
    ADC decnum
    STA decnum
    LDA decnum+1
    ADC #0
    STA decnum+1
.pn_next
    INY
    BNE _parse_num1
._pn_notdigit
    STY refindex+1
    BIT neg
    BPL _pn_is_pos
    LDX #decnum MOD256
    JMP twc16
._pn_is_pos
    RTS
.times10
    JSR _cpydn          \  Make a copy
    JSR _dbldn          \  Now we have *2
    JSR _dbldn          \  Now we have *4
    JSR _add_dn         \  Add copy to get *5, then double one last time
._dbldn
    ASL decnum
    ROL decnum+1
    RTS
._cpydn
    LDX #0
    JSR _cpydn_1
._cpydn_1
    LDA decnum, X
    STA dncpy, X
    INX
    RTS
._add_dn
    LDX #0
    CLC
    JSR _add_dn1
._add_dn1
    LDA decnum, X
    ADC dncpy, X
    STA decnum, X
    INX
    RTS



.despatch_end

SAVE "M.MATHS", maths_begin, maths_end, rts
SAVE "M.SCDESP", despatch_begin, despatch_end, rts

SAVE "ALLCODE", despatch_begin, maths_end, rts
