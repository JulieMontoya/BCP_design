\  SCHEMATIC GRAPHICS
\  Now with 18-byte part records including default legend disposition

\  VARIABLES WHICH HAVE DIFFERENT NAMES IN SCHEMATIC THAN IN BCP

cur_subp = &7F

ptb = fpb               \  parts table ZPP
ptbase = fpbase         \  Base address (in workspace) for parts FLRs
tmbase = ssbase         \  Base address (in WS) for term/outl/subp VLRs

\  c_part is old fprt
\  n_ptyp is old nfp

\  CONSTANTS

PART_REC_LEN    = 18
SUBP_REC_LEN    = 6
POSN_REC_LEN    = 8

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\

ORG &4800

.sch_app_begin
.graphics_begin

\  A COMMAND
\  e.g. A R1 RES1 1K\3216W
\         |  |    |
\         |  |    Value
\         |  Symbol name
\         Designator

.A_cmd
    JSR skip_space
    BCC _acmd1
    BRK
    EQUB 53
    EQUS "Bad part"
    BRK
._acmd1                 \  Parse designator
    STY refindex
    JSR pack_desr
    BCC _acmd2
    BRK
    EQUB 54
    EQUS "Bad des'r"
    BRK
._acmd2                 \  Parse symbol name
    JSR skip_space
    BCC _acmd3
._acmd_bad_sym
    BRK
    EQUB 55
    EQUS "Bad symbol"
    BRK
._acmd3                 \  Search for symbol
    CLC                 \  Set [ssb] = [cbb]+Y
    TYA
    ADC cbb
    STA ssb
    LDA cbb+1
    ADC #0
    STA ssb+1           \  Now we are ready to search for part
    JSR find_part_by_name
    BCC _acmd_bad_sym
    PHA                 \  Stash part index
    CLC                 \  Advance pointer past part name
    TYA
    ADC refindex+1
    STA refindex+1      \  Save updated pointer
    TAY
    PLA                 \  Retrieve part index
    JMP select_part     \  Load the part
    RTS

\\  THIS IS NOT THE ONLY ONE .....
ORG &4A00

.ext_get_point
    JMP get_point
.ext_sch_gplot
    JMP sch_gplot
.ext_init
    JMP init
.ext_select_part
    JMP select_part
.ext_select_subpart
    JMP select_subpart
.ext_sym_draw
    JMP sym_draw
.ext_mark_term
    JMP mark_term
.ext_draw_bdy
    JMP draw_bdy

.ext_despatch_cmd
    JMP despatch_cmd
.ext_rewind_cb
    JMP rewind_cb
.ext_skip_space
    JMP skip_space
.ext_pack_desr
    JMP pack_desr

.init
    LDA #0
    JSR select_flip
    LDA #0
    JMP select_rot

.get_point
    JSR mult_r_cos      \  Get offsets from centre at point C
    LDX #0              \  Byte in co-ordinates
    CLC
    JSR _gp1            \  Set pinX = XC + XB
    CLC
    JSR _gp1            \  Set pinY = YC + YB
    JSR conv_coords
    RTS
._gp1
    JSR _gp2            \  Do all this twice
._gp2
    LDA _XC,X           \  Distance from centre
    ADC _XB,X           \  Centre co-ordinate
    STA pinX,X          \  Store at pinX,pinY
    INX                 \  Move on to next byte
    RTS
    
.mult_r_cos
    JSR fit_X           \  ensure 0 <= X <= 15
    STX &76
    LDX #_XA MOD256     \  X => radius
    LDY #_XC MOD256     \  Y = location to copy to
    JSR copy_word
    
    LDX &76
    BEQ mult_r_sin      \  Carry on
._mc_not_pos0
    CPX #8
    BEQ _mc_negate      \  Negate and carry on
._mc_not_pos8
    
    \ MULTIPLY RADIUS BY COSINE

    LDA alt_cosines, X
    ASL A               \  C=1 => was negative
    STA multiplier
    LDA #0
    STA multiplier+1
    LDX #multiplicand   \  X => register to seed
    LDY #_XC MOD256     \  Y => seed from _XC
    JSR seed_zpp
    JSR mult16          \  C gets preserved
    
    \ SAVE THE RELEVANT PART OF THE PRODUCT
    
    LDX #product+1      \  X => 256s byte of product
    LDY #_XC MOD256     \  Y => where to save
    JSR zp_to_ws
    BCC mult_r_sin      \  C has not been touched ...
._mc_negate
    LDX #_XC MOD256     \  X points to variable
    JSR twc16           \  negate it
.mult_r_sin
    LDX #_XA MOD256     \  X => radius
    LDY #_YC MOD256     \  Y = location to copy to
    JSR copy_word
    LDX &76
    CPX #4
    BEQ _ms_sin_p
._ms_not_pos4
    CPX #12
    BEQ _ms_negate
._ms_not_posC
    
    \ MULTIPLY RADIUS BY SINE

    LDA alt_sines, X
    ASL A               \  C=1 => was negative
    STA multiplier
    LDA #0
    STA multiplier+1
    LDX #multiplicand   \  X => register to seed
    LDY #_YC MOD256     \  Y => seed from _YC
    JSR seed_zpp
    JSR mult16          \  C gets preserved
    
    \ SAVE THE RELEVANT PART OF THE PRODUCT

    LDX #product+1      \  X => 256s byte of product
    LDY #_YC MOD256     \  Y => where to save
    JSR zp_to_ws
    BCC _ms_sin_p       \  C has not been touched ...
._ms_negate
    LDX #_YC MOD256     \  X points to variable
    JSR twc16           \  negate it
._ms_sin_p
    RTS

.sch_gplot              \  GENERIC SYMBOL PLOT
    TXA
.sch_gplotA
    ASL A
    TAX
    \CPX #&10            \  See if it's a terminal
    \BCS _gp_term        \  Skip plotting if so
    LDA sch_plotmodes, X
    STA &70
    LDA sch_plotmodes+1, X
    STA &71
    JSR _gp_doplot
._gp_term
    LDX #pinX MOD256    \  Current point
    LDY #prvX MOD256    \  Previous point
    JMP copy_coords     \  Make copy    
._gp_doplot
    JMP (&70)

.sch_move
    LDX #pinX MOD256    \  Current point
    LDY #dstX MOD256    \  Destination
    JSR copy_coords     \  Make copy
    JSR conv_coords     \  Convert co-ordinates to screen space
    LDX #scrX MOD256    \  Current point in screen space
    LDY #lmX MOD256     \  Last MOVEd point in screen space
    JSR copy_coords     \  Make copy
    LDA #4
    STA plotmode        \  Set PLOT mode to MOVE
.sch_plot
    LDX #scrX MOD256
    JMP do_plot_X

.sch_draw
    JSR conv_coords     \  Convert co-ordinates to screen space
    LDA #5
    STA plotmode        \  Set PLOT mode to DRAW
    BNE sch_plot
    
.sch_triangle
    JSR conv_coords     \  Convert co-ordinates to screen space
    LDA #85
    STA plotmode        \  Set PLOT mode to TRIANGLE
    BNE sch_plot

.sch_close
    JSR conv_coords
    JSR sch_plot
    LDA plotmode
    CMP #4
    BEQ _sch_quick_rect
._sch_lmXY
    LDX #lmX MOD256
    JMP do_plot_X
    
._sch_quick_rect
    INC plotmode        \  was MOVE, now DRAW
  ._qrect1
    JSR begin_plot      \  Also sets X=0
    JSR _qr_lmxy        \  X = lmX
    JSR _qr_scrxy       \  Y = scrY
    JSR _sch_lmXY       \  quick plot lmX, lmY
    JSR begin_plot
    JSR _qr_scrxy       \  X = scrX
    JSR _qr_lmxy        \  Y = lmY
    JMP sch_plot        \  quick plot scrX, scrY
    
._qr_lmxy               \  send co-ordinate from last moved screen point
    JSR _qr_lmxy1
._qr_lmxy1
    LDA lmX, X
    INX
    JMP oswrch
._qr_scrxy              \  send co-ordinate from current screen point
    JSR _qr_scrxy1
._qr_scrxy1
    LDA scrX, X
    INX
    JMP oswrch

\  DRAW  (PART OF)  CIRCLE

.sch_circle_nj          \  Non-joining version
    LDA #4
    STA plotmode
.sch_circle             \  Keep same PLOT mode
    LDA pinX+1          \  See if radius is positive
    BPL sch_circle_a    \  Draw anticlockwise if so
    LDX #pinX MOD256 
    JSR twc16           \  Positivify it    
.sch_circle_c
    JSR sch_circle_i
    BCC _cc_1           \  skip if start < finish
    ADC #15             \  Carry is already set here
._cc_1
    STX &77             \  we are actually going from finish to start
    TAX
._cc_2
    JSR sch_circle_p
    BEQ _cc_3
    DEX                 \  Clockwise means count down
    BPL _cc_2           \  Not expecting to fall through
._cc_3
    RTS

.sch_circle_a
    JSR sch_circle_i
    BCC _ca_1           \  skip if start < finish
    ADC #15             \  Carry is already set here
    STA &77
._ca_1
    JSR sch_circle_p
    BCS _ca_2
    INX
    BNE _ca_1           \  Not expecting to fall through
._ca_2
    RTS

\  INITIALISE CIRCLE DRAWING

.sch_circle_i
    LDX #prvX MOD256    \  Copy previous X,Y ...
    LDY #_XB MOD256     \  ... to point B
    JSR copy_coords
    LDA pinX            \  pinX bits 0-7 give radius
    STA _XA
    LDA pinX+1
    STA _XA+1
    LDA pinY
    JSR split_nybble_XA \  X = low nybble (start), A = high nybble (end)
    STA &77             \  save a copy of end
    CPX &77             \  C=1 => start < end
    RTS

\  DRAW POINT X ON CIRCLE

.sch_circle_p
    TXA                 \  Stash a copy of X
    PHA
    JSR get_point
    LDX #scrX MOD256
    JSR do_plot_X
    LDA #5              \  Force plot mode to DRAW
    STA plotmode
    PLA                 \  Retrieve the X we saved earlier
    TAX
    CPX &77             \  Z=1 => we have reached last point
    RTS

\  SET CIRCLE CENTRE
\  (does not actually do anything)

.sch_centre
    RTS
    
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

\  DRAW A SYMBOL

.sym_draw
    LDX #n_term MOD256
    JSR treble_ws_X     \  multiply number of terminals by 3
    LDX #pcb
    LDY #term_a MOD256
    JSR seed_zp_o       \  Set up pcb to point to outlines
    LDA outl_l          \  Length of outlines
    STA mxy
    LDY #0
._sd1
    JSR sym_unpack_vertex
    \TAX                 \  gplot wants plot mode in X
    JSR sch_gplotA
    LDY rty
    CPY mxy
    BCC _sd1
    RTS

\  UNPACK A VERTEX WITHIN A SYMBOL

.sym_unpack_vertex
    LDA (pcb), Y        \  First byte is X low
    INY
    STA pinX
    LDA (pcb), Y        \  Second byte is Y low
    INY
    STA pinY
    LDA #0
    LDX #&FF            \  We may need this later on .....
    STA pinX+1          \  Clear high bits of pinX ...
    STA pinY+1          \  ... and pinY
    LDA (pcb), Y        \  Third byte is { Y9 Y8 X9 X8 K3 K2 K1 K0 }
    INY
    STY rty             \  Save start of next vertex
    PHA                 \  save it for the plot mode
    ASL A               \  Shift out Y bit 9 (= sign)
    BCC _suv_y_pos      \  Skip if positive
    STX pinY+1          \  Set all bits to extend the sign
._suv_y_pos
    ROL pinY+1          \  Copy bit into pinY high
    ASL A               \  Shift out Y bit 8
    ROL pinY+1          \  Copy bit into pinY high
    ASL A               \  Likewise for X bits 9 and 8
    BCC _suv_x_pos      \  Skip if positive
    STX pinX+1          \  Set all bits to extend the sign
._suv_x_pos
    ROL pinX+1
    ASL A
    ROL pinX+1    
    PLA                 \  Retrieve plot mode
    AND #&0F            \  Remove high bits
    RTS

.term_marker
    JSR conv_coords     \  Convert pin co-ordinates to screen space
    LDA #4              \  MOVE, absolute
    LDX #scrX MOD256
    JSR do_plot_XA      \  Now cursor is on terminal
    LDY #0
    LDA #2              \  DRAW, relative, inverting
    STA plotmode
._tm1
    JSR _tm2            \  Do all this twice
._tm2
    JSR _tm_plot_move   \  First, third times; move
    JSR _tm_plot_norm   \  Second, fourth times; draw
    RTS

    
._tm_plot_norm          \  Plot as per plotmode
    JSR begin_plot0
    JMP _tm_cplot
._tm_plot_move          \  MOVE relative
    LDA #0
    JSR begin_plotA
._tm_cplot
    JSR _tm_cplot1      \  Once for X co-ord, again for Y co-ord
._tm_cplot1
    LDA tm_coords, Y
    INY
.send_A_ext_sgn         \  Send A to VDU, followed by &00 OR &FF
    JSR oswrch
    AND #&80            \  Clear bits 0-6, giving &80 or &00
    BEQ _asx1           \  Skip if result of AND was &00
    LDA #&FF            \  For negative amount
._asx1
    JMP oswrch    
    
._safe_return
    RTS
    
.fit_X
    TXA
.fit_X1
    AND #&0F
    TAX
    RTS

.mark_term
    PHA
    WS_TO_ZP pcb, term_a
    PLA
    JSR treble_A
    TAY
    JSR sym_unpack_vertex
    JMP sch_gplotA
    
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\

.select_part
    JSR init_ptb

\  Initialise appropriate workspace variables for a part or subpart.
\  Expects ptb already initialised.
\
\  If a part has sub-parts, we initialise;
\   n_subp => number of subparts
\   subp_a => address of subpart table
\   w_pins => no. of pins in whole part
\   pins_a => address of pin table
\
\  NB. Until we have selected a subpart, the only other sensible thing we
\  can do in this state is back-reference pins.
\
\  If a part has *no* sub-parts, we initialise:
\   n_subp => 0
\   n_term => no. of terminals
\   w_pins => no. of terminals
\   term_a => address of terminals
\   outl_l => outline length
\   bdyL, bdyB, bdyR, bdyT => boundary

.store_part             \  INITIALISE WS FROM A PART OR SUBPART
    LDY #4              \  Y=4 => type / no. subparts / no. terms
    LDA #0
    STA n_subp
    LDA (ptb), Y
    BPL store_non_envelope

.store_envelope         \  expects byte 4 already in A
    AND #&7F
    STA n_subp
    INY                 \  Y=5 => offset to systems
    LDA (ptb), Y
    INY
    CLC
    ADC tmbase          \  Base for systems  (shared with terminals)
    STA subp_a
    LDA (ptb), Y
    INY                 \  Y=7 => number of pins
    ADC tmbase+1
    STA subp_a+1        \  Now subp_a is actual address of systems
    LDA (ptb), Y
    INY                 \  Y=8 => offset to pins
    STA w_pins
    LDA (ptb), Y
    INY
    CLC
    ADC pnbase          \  Base for pins
    STA pins_a
    LDA (ptb), Y
    INY
    ADC pnbase+1
    STA pins_a+1        \  Now pins_a is actual address of pins
    RTS
    
.store_non_envelope     \  expects byte 4 already in A
    STA w_pins          \  Set this for self-contained parts ...
.store_non_env1         \  ... or not, at this alternative entry point
    STA n_term
    INY                 \  Y=5 => offset to terminals
    LDA (ptb), Y
    INY
    CLC
    ADC tmbase          \  Base for terminals
    STA term_a
    LDA (ptb), Y
    INY                 \  Y=7 => outline length
    ADC tmbase+1
    STA term_a+1        \  Now term_a is actual address of terminals
    LDA (ptb), Y
    STA outl_l
    INY                 \  Y=8 => legend angle and size
    LDA (ptb), Y
    JSR mung_lgdmode
\    ASL A               \  Get bit 7 into C
\    ROL A               \  Old bit 7 into bit 0, old bit 6 into C
\    ROL A               \  Old bit 7 into bit 1, old bit 6 into bit 0
\    CLC
\    ADC pangle          \  Add the selected rotation
\    AND #3              \  Ignore the high bits
\    TAX
\    LDA alt_lgdmodes,X  \  Get legend mode value
    STA lgdmode    
    INY                 \  Y=9 => legend co-ordinates
    LDX #lgdX MOD256
    JSR unpack_coords_ptb
    \  Now Y=12 => boundary L,B
    LDX #bdyL MOD256
    JSR unpack_coords_ptb
    \  One last time; now Y=15 => boundary R,T and X points to bdyR
.unpack_coords_ptb      \  UNPACK CO-ORDINATES AT (ptb), Y TO wkspace, X
                        \  ADVANCES Y BY 3, X BY 4
    LDA (ptb), Y        \  1st byte is low byte of X
    INY
    STA wkspace, X
    LDA (ptb), Y        \  2nd byte is low byte of Y
    INY
    STA wkspace+2, X
    LDA (ptb), Y        \  3rd byte is high bits as %YYYYXXXX
    INY
    PHA                 \  Make a copy on the stack
    AND #&0F            \  Extract just the low nybble
    JSR unpxy_es    \  Extend sign
    STA wkspace+1, X
    PLA                 \  Retrieve the copy
    JSR lsra4           \  Shift A right 4 places, importing zeros
    JSR unpxy_es    \  Extend sign
    STA wkspace+3, X
.inx4
    INX                 \  Catch up X
    INX
    INX
    INX
    RTS
    
.select_subpart
    PHA                 \  Stash subpart index
    LDA #SUBP_REC_LEN
    JSR set_multiplicand
    LDX #ssb
    LDY #subp_a MOD256
    PLA                 \  Retrieve subpart index
    JSR mult_with_pl    \  Now ssb points to selected subpart record
.sel_subp1
    LDY #5              \  Byte 5 => offset to pins
    LDA (ssb), Y
    STA pins_o
    DEY                 \  Byte 4 => index of subpart
    LDA (ssb), Y
    \  Assume for now that the index is already correct and we do not have
    \  to search for subparts by name at this stage .....
    JSR init_ptb        \  Set up ptb to point to subpart

\  Use a subpart.
\  Expects ptb already initialised.
\  Throws an error if subparts are found.

.use_subpart
    LDY #4
    LDA (ptb), Y
    BPL store_non_env1
    BRK
    EQUB 51
    EQUS "Bad subpart"
    BRK

.init_ptb
    PHA                 \  Stash part index
    LDA #PART_REC_LEN
    JSR set_multiplicand
    
    \SET_MULTIPLICAND PART_REC_LEN
    
    LDX #ptb            \  Pointer to parts
    LDY #ptbase MOD256  \  Base address
    PLA                 \  Retrieve part index
    JMP mult_with_pl    \  now ptb points to part FLR

.mung_lgdmode
    ASL A               \  Get bit 7 into C
    ROL A               \  Old bit 7 into bit 0, old bit 6 into C
    ROL A               \  Old bit 7 into bit 1, old bit 6 into bit 0
    CLC
    ADC pangle          \  Add the selected rotation
    AND #3              \  Ignore the high bits
    TAX
    LDA alt_lgdmodes,X  \  Get legend mode value
    RTS


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\
\  Search for the subpart of a part which contains the pin supplied in A.
\  If this is fast enough, we can get rid of back references.
\
\  Expects the selected part to be an envelope.
\  On exit;
\   cur_subp => subpart with pin
\   pin      => terminal within subpart
\  Gives error if no such pin.

.search_pin
    LDY #0              \  Don't trash A
    STY cur_subp
    STA pin
    CMP w_pins
    BCS _shp_nsp
    LDA #0              \  Rewind subparts
    JSR select_subpart
    WS_TO_ZP pcb, pins_a MOD256     \  pcb points to pins_a
    LDY #0
._shp0
    LDA (pcb), Y
    CMP pin
    BEQ _shp_m
    INY
    CPY n_term
    BCC _shp0
    INC cur_subp
    TYA                 \  Advance pcb by Y
    CLC
    ADC pcb
    STA pcb
    BCC _shp1           \  Skip if no carry
._shp1
    LDA ssb             \  Advance ssb by 6
    CLC
    ADC #6
    STA ssb
    BCC _shp2           \  Skip if no carry
    INC ssb+1
._shp2
    JSR sel_subp1       \  Set as selected subpart
    LDY #0
    LDA cur_subp
    CMP n_subp
    BCC _shp0
._shp_nsp               \  Error: no such pin
    BRK
    EQUB 52
    EQUS "No such pin"
    BRK
._shp_m                 \  Matched pin in subpart
    STY pin
    LDA cur_subp
    BEQ _shp3
    JSR select_subpart
._shp3
    RTS
    
    
\  DRAW BOUNDARY

.draw_bdy
    COPY_COORDS bdyL, pinX
    JSR conv_coords
    COPY_COORDS scrX, lmX
    COPY_COORDS bdyR, pinX
    JSR conv_coords
    LDA #4
    STA plotmode
    \LDX #pinX MOD256
    \JSR do_plot_XA
    JSR sch_plot
    LDA #14 
    STA plotmode
    \JSR begin_plot0
    JMP _qrect1
    
\  SEED ZERO-PAGE POINTER AT X FROM WORKSPACE AT Y, ADDING OFFSET IN A

.seed_zp_o
    CLC
    ADC wkspace, Y
    STA 0,X
    LDA wkspace+1, Y
    ADC #0
    STA 1,X
    RTS

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\
\  DRAW TEXT IN (ALMOST) ANY ORIENTATION
\  -- BUT instead of flipping text, just print it right-justified.
\     (this prob'ly ain't gonna be easy)
\
\  lgdmode bits 0-4 => control character for cursor dir after writing char
\          bit 5    => rotate
\          bit 6    => flip L-R
\          bit 7    => flip U/D
\  Rotated, unflipped: 0 = &09, 90 = &2B, 180 = &C8, 270 = &EA


\  SHOW CHARACTER IN ANY ORIENTATION
\  (ROTATED, FLIPPED L-R, UPSIDE-DOWN)
.show_char
    STA plotbuf+6
    TYA
    PHA
    TXA
    PHA
    LDX #(plotbuf+6)MOD256
    LDY #(plotbuf+6)DIV256
    LDA #10
    JSR &FFF1
    LDA #32
    BIT lgdmode
    BEQ _no_rot
._rot_char
    JSR _clr_copy
    LDY #0
._begin_row
    LDX #0
._read_pixel
    LDA plotbuf+7, Y
    AND bitsLH, X
    JSR _set_cpy_bit
._next_pixel
    INX
    CPX #8
    BCC _read_pixel
    INY
    CPY #8
    BCC _begin_row
    JSR _copy_back
    BIT lgdmode
._no_rot
    BVC _no_flip
._flip_char
    JSR_clr_copy
    LDX #0
._flip_row
    LDY #0
._flip_pixel
    LDA plotbuf+7, X
    AND bitsLH, Y
    JSR _set_cpy_bit
._flip_next
    INY
    CPY #8
    BCC _flip_pixel
    INX
    CPX #8
    BCC _flip_row
    JSR _copy_back
._no_flip
    LDA #23
    JSR oswrch
    LDA #225
    JSR oswrch
    BIT lgdmode
    BMI _show_ud
    LDX #(plotbuf+7)MOD256
    JSR send_pt_X
    JSR send_pt_X
._show_ch1
    LDA #225
    JSR oswrch
    LDA #8
    JSR oswrch
    PLA
    TAX
    PLA
    TAY
    LDA lgdmode
    AND #&1F
    JMP oswrch
._show_ud
    LDX #8
._show_ud1
    LDA plotbuf+6,X
    JSR oswrch
    DEX
    BNE _show_ud1
    BEQ _show_ch1
._set_cpy_bit
    BEQ _scb1
._set_cpy_bit0
    LDA plotbuf+15,X
    ORA bitsHL,Y
    STA plotbuf+15,X
._scb1
.graphics_rts
    RTS
._clr_copy
    LDX #moveX MOD256
    LDY #(plotbuf+15)MOD256
    JSR copy_coords
    LDX #moveX MOD256
    JMP copy_coords
._copy_back
    LDX #(plotbuf+15)MOD256
    LDY #(plotbuf+7)MOD256
    JSR copy_coords
    JMP copy_coords

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\
\  THE ALL NEW-STYLE COMMAND DESPATCHER

.despatch_cmd
    JSR rewind_cb
    JSR skip_space
.despatch_cmd0
    \ STY refindex+1      \  Save contents of Y
    LDX #0              \  X is pointer into despatch table
._dc_new_cmd
    LDY refindex+1      \  Y is pointer into card buffer
    LDA desp_table, X
    BEQ _dc_end_table
._dc_test
    LDA desp_table, X
    AND #&7F            \  Strip high bit
    CMP (cbb), Y
    BNE _dc_no_match
    LDA desp_table, X
    BMI _dc_match       \  Last char means we have a complete match
    INX                 \  Next char in despatch table
    INY                 \  Next char in command
    BNE _dc_test        \  Not expected to fall through
._dc_match
    INY                 \  Point to character *after* command
    STY refindex+1      \  Save Y
    LDA desp_table+1, X
    STA &70
    LDA desp_table+2, X
    STA &71
    CLC                 \  C=0 => match
    \RTS
    JMP (&70)           \  Perform the command!
._dc_no_match
    LDA desp_table, X
    BMI _dc_end_cmd     \  High bit set indicates last char of command
    INX
    BNE _dc_no_match    \  Not expected to fall through
._dc_end_cmd
    INX                 \  Skip high-bit character
    INX                 \  Skip address low
    INX                 \  Skip address high
    BNE _dc_new_cmd     \  Not expected to fall through
._dc_end_table
    SEC                 \  C=1 => no match
    RTS

\  This may well be database material

.skip_space
    LDY refindex+1
._ss1
    LDA (cbb), Y
    CMP #&0D            \  Will set C=1 if it is CR
    BEQ _ss_end
    CMP #&21            \  See if ! or later char
    BCS _ss_found
    INY
    BNE _ss1            \  Not expected to fall through
._ss_found
    STY refindex+1      \  Save updated pointer
    CLC                 \  C=0 => found something
._ss_end
    RTS
    
\  This definitely belongs with database functions

\  REWIND THE CARD BUFFER

.rewind_cb
    LDY #0
    STY refindex+1
.rewind_cb0
    LDA #cardbuf MOD256
    STA cbb
    LDA #cardbuf DIV256
    STA cbb+1
    RTS

\  NEW STYLE DESPATCH TABLE HAS HIGH BIT SET IN LAST CHARACTER OF EACH
\  COMMAND, INSTEAD OF DELIMITER CHARACTERS.
\
\  N.B. LONG COMMANDS (WITH MODIFIER) MUST COME BEFORE SHORTER ONES!
\  

.desp_table             \ Address

    EQUS "A" : EQUB &D3 : EQUW AS_cmd       \  AS => Add Symbol
    EQUB &C1            : EQUW A_cmd        \  A => Add Part
    EQUB &C4            : EQUW D_cmd        \  D => Delete
    EQUS "M" : EQUB &CE : EQUW MN_cmd       \  MN => Move Next
    EQUB &CD            : EQUW M_cmd        \  M => Move
    EQUS "V" : EQUB &C8 : EQUW VH_cmd       \  VH => Viewport Home
    BRK

\  THIS WILL HAFTA MOVE .....
\

.get_pl_entry
    LDY #2              \  Byte 2 => part index
    LDA (plb), Y
    STA c_part
    JSR select_part     \  Now the part is selected
    LDY #3              \  Byte 3 => offset to positions
    LDA (plb), Y
    STA posn_o
    INY                 \  Bytes 4, 5 => offset to wiring data
    LDA (plb), Y
    CLC
    ADC wlbase
    STA wire_a
    INY
    LDA (plb), Y
    ADC wlbase+1
    STA wire_a+1        \  Now wire_a => wiring list entry
    JSR get_position    \  Now pcb points to position data
    
    \  WE MAY HAVE TO OVERWRITE LGDMODE, LGDX AND LGDY WITH THE
    \  NEW VALUES GIVEN AT (pcb), Y

    RTS

.get_position
    LDY #wire_a MOD256  \  Beginning of wiring data
    LDA posn_o          \  Offset to positions
    LDX n_subp
    BNE _gpo_has_sp
._gpo_no_sp
    LDX #pcb            \  Store sum directly in [pcb]
    JSR seed_zp_o
    JMP _gpo_1
._gpo_has_sp
    LDX cur_subp        \  Don't pollute A or Y
    BEQ _gpo_no_sp      \  First subpart => same as no subparts
    STX multiplier      \  We will deal with the high byte later
    LDX #preload        \  Store sum in preload reg
    JSR seed_zp_o
    LDA #POSN_REC_LEN
    JSR set_multiplicand
    STA multiplier+1    \  A will still hold 0
    JSR mult16_preload  \  Find wanted record
    LDA product
    STA pcb
    LDA product+1
    STA pcb+1
._gpo_1
    LDY #0
    LDA (pcb), Y        \  Byte 0 => part disposition .....rrf
    LSR A               \  C => flip
    PHA                 \  Save rotation for later
    BCS _gpo_flip1
    LDA #0
    BEQ _gpo_flip2
._gpo_flip1
    LDA #1
._gpo_flip2
    STA pside           \  Store in rightful place
    JSR select_flip
    PLA                 \  Retrieve rotation
    STA pangle          \  Store in rightful place
    JSR select_rot
    INY
    LDA (pcb), Y        \  Byte 1 => Centre X low
    STA cenX
    INY
    LDA (pcb), Y        \  Byte 2 => Centre Y low
    STA cenY
    INY
    LDA (pcb), Y        \  Byte 3 => Centre YYYYXXXXX high
    JSR nybble_XA       \  Now A = Y high, X = X high
    JSR unpxy_es
    STA cenY+1
    TXA
    JSR unpxy_es
    STA cenX+1
    LDY #cenX MOD256    \  Scale up the unpacked co-ordinates
    JMP mult_coords
\\\\    LDY #4
\\\\    LDA (pcb), Y        \  Byte 4 => legend disposition d....rrf
\\\\    BMI _gpo_lgd_ns
\\\\    \  HERE WE HAVE TO OVERWRITE LGDMODE, LGDX AND LGDY WITH THE
\\\\    \  NEW VALUES GIVEN AT (pcb), Y
\\\\._gpo_lgd_ns
\\\\    RTS

\  ORIGINAL CODE

.real_pack_part
LDX#cenX MOD256
LDY#plotbuf MOD256
JSRdiv_coords
LDY#4
LDAplotbuf
STA(plb),Y
INY
LDAplotbuf+2
STA(plb),Y
INY
LDXplotbuf+1
LDAplotbuf+3
JSRjoin_nybble_XA
STA(plb),Y
INY
LDApside
LSRA        \ C <- pside0
ORApangle
RORA        \ A7 <- pside0  C <- pangle0
RORA        \ A7 <- pangle0  C <- pangle1
RORA        \ A7 <- pangle1
ORAfprt
STA(plb),Y
RTS

    

\  FAKE JUMP TABLE TO KEEP IT HAPPY
\  WE MAY AS WELL START ON A PAGE BOUNDARY

ALIGN &100

.AS_cmd
    RTS
\.A_cmd
    RTS
.D_cmd
    RTS
.MN_cmd
    RTS
.M_cmd
    RTS
.VH_cmd
    RTS
    
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\

\  THIS IS LOOKING RATHER DATABASE-Y NOW

\  Pack up a component designator such as IC1 into 2 bytes.
\  Designator is read from card buffer, pointed to by refindex
\  Packed designator is written to desP, desP+1

.pack_desr
    LDY refindex
    INY
    LDA (cbb), Y
    CMP #65
    BCC _pd_1ltr
    LDX #0
.findpair
    CMP ltrpairs+1, X
    BNE _fp_nomatch
    DEY
    LDA (cbb), Y
    INY
    CMP ltrpairs, X
    BEQ _foundpair
    LDA (cbb), Y
._fp_nomatch
    INX
    INX
    CPX #64
    BCC findpair
    RTS \ with C=1
._foundpair
    TXA
    LSR A
    ORA #32
    BNE _pd_save
    RTS \ with C=0
._pd_1ltr
    DEY
    LDA (cbb), Y
    AND #31
._pd_save
    STA refindex+1
    STA letter
    INY
    JSR parse_num
    LDA decnum+1
    AND #3
    STA desP+1
    LDA letter
    ASL A
    ASL A
    ORA desP+1
    STA desP+1
    LDA decnum
    STA desP
    CLC
._pd_done
    RTS

.parse_num
    LDA #0
    STA decnum
    STA decnum+1
    STAneg
._parse_num1
    LDA (cbb), Y
    CMP#45
    BNEpn_notminus
    LDA#255
    STAneg
    BNEpn_next
.pn_notminus
    CMP #48
    BCC _pn_notdigit
    CMP #58
    BCS _pn_notdigit
    JSR times10
    LDA (cbb), Y
    SEC
    SBC #48
    CLC
    ADC decnum
    STA decnum
    LDA decnum+1
    ADC #0
    STA decnum+1
.pn_next
    INY
    BNE _parse_num1
._pn_notdigit
    STY refindex+1
    BIT neg
    BPL _pn_is_pos
    LDX #decnum MOD256
    JMP twc16
._pn_is_pos
    RTS
.times10
    JSR _cpydn          \  Make a copy
    JSR _dbldn          \  Now we have *2
    JSR _dbldn          \  Now we have *4
    JSR _add_dn         \  Add copy to get *5, then double one last time
._dbldn
    ASL decnum
    ROL decnum+1
    RTS
._cpydn
    LDX #0
    JSR _cpydn_1
._cpydn_1
    LDA decnum, X
    STA multiplicand, X
    INX
    RTS
._add_dn
    LDX #0
    CLC
    JSR _add_dn1
._add_dn1
    LDA decnum, X
    ADC multiplicand, X
    STA decnum, X
    INX
    RTS

    
\  FIND A PART BY ITS NAME
\
\  ssb => points to name of part we are searching for
\  On exit, C=1 => found; A is index, ptb is ready for store_part
\           C=0 => not found.

.find_part_by_name
    JSR rewind_lib
    LDX #0              \  X => parts counter
._fpbn_np
    LDY #0
._fpbn_test
    LDA (ptb), Y
    CMP #33             \  See if space or control char
    BCC _fpbn_wild      \  Skip test if it is
    CMP (ssb), Y
    BNE _fpbn_nomatch
._fpbn_wild
    INY
    CPY #4
    BCC _fpbn_test      \  C=1 if we fall through
    \STX c_part
    TXA                 \  Return found part in A
    RTS                 \  C=1 => success
._fpbn_nomatch
    LDA ptb
    CLC
    ADC #PART_REC_LEN
    STA ptb
    BCC _fpbn_nm1
    INC ptb+1
._fpbn_nm1
    INX
    CPX n_ptyp
    BCC _fpbn_np
    CLC
    RTS                 \  C=0 => failure
    
.rewind_lib
    LDY #0
    JSR _rwl1
._rwl1
    LDA ptbase, Y
    STA ptb, Y
    INY
    RTS

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\
\  Packed co-ordinate pairs are 3 bytes long; we often need to treble the
\  length of a list held in a workspace variable
    
.treble_ws_X
    LDA wkspace, X      \  It had better be <= 127 .....
    ASL A
    ADC wkspace, X
    RTS

\  Sometimes we already have the number in the accumulator that we want
\  to multiply by 3.

.treble_A
    STA preload+1
    ASL A
    ADC preload+1
    RTS

.vphome
    LDA#0
    TAX
.vph1
    STAvptL,X
    INX
    CPX#4
    BNEvph1
    LDA #5
    JSR vph2
    LDY #vptR MOD256
    JSR zp_to_ws
    LDA#4
    JSR vph2
    LDY #vptT MOD256
    JSR zp_to_ws
    JMP vp_moved
.vph2
    STA multiplicand+1
    LDA #0
    STA multiplicand
    LDX #multiplier
    LDY #scaleD MOD256
    JSR seed_zpp
    JSR mult16
    LDX #divisor
    LDY #scaleM MOD256
    JSR seed_zpp
    JSR divide_no_rem
    LDA quotient
    BNE vph3
    DEC quotient+1
.vph3
    DEC quotient
    LDX #quotient
    RTS
.vp_moved
    \JMP draw_vis
    CLC
    RTS

\  GET NUMBER OF CHARACTERS IN COMPONENT DESIGNATOR
\  NUMBER OF DIGITS IS FOUND BY COMPARING WITH SUCCESSIVE POWERS OF TEN
\  IN DESCENDING ORDER UNTIL WE EXCEED THAT VALUE
.get_lgd_len
    LDX #3              \  Start with 10 ** 3
._gll1
    LDA desP+1          \  Test high byte of designator number
    AND #3              \  Ignore "letters" bits
    CMP pwrs_10H, X
    BNE _gll2           \  If high bytes differ, result is already known
    LDA desP            \  Test low byte of des'r number
    CMP pwrs_10L, X
._gll2
    BCS _gll3           \  Branch if higher than 10 ** X
    DEX                 \  Try again with next smaller power of 10
\  NUMBER OF LETTERS IS FOUND DIRECTLY FROM HIGH BIT OF PACKED DESIGNATOR
    BNE _gll1
._gll3
    INX                 \  Number is one digit longer
    INX                 \  Account for 1st letter
    BIT desP+1          \  See if there are two letters
    BPL _gll4
    INX                 \  Account for 2nd letter
._gll4
    TXA
    RTS
    
.legend
\    LDX #lgdX MOD256
\    LDY #absX MOD256
\    JSR copy_coords
    COPY_COORDS lgdX, pinX
    JSR conv_coords
.legend0
    LDA #5              \  Text at graphics cursor
    JSR oswrch
    LDA #4
    LDX #scrX MOD256
    JSR do_plot_XA
    JSR unpack_desr
    BCC _lgd1           \  C=0 => single character
    JSR show_char
    TXA                 \  X holds second character
._lgd1                  \  Here A = second or only character
    JSR show_char
    JSR decode_decnum
._lgd2
    LDA dntext-1,X
    JSR show_char
    DEX 
    BNE _lgd2
    LDA #4              \  Text at text cursor
    JMP oswrch


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\
\  PARTS LIST HANDLING
\
\  Unpack a parts list entry
\    Parts list entry contains offset to wiring list entries
\    (which are followed by value and growth space)  and secondary
\    offset to symbol co-ords.
\



\\\\\\\\\\  JUST MUCKING ABOUT REALLY
    
    
\    INY                 \  Get high byte of offset
\    LDA (ptb), Y
\    DEY                 \  Return to low byte
\    PHA
\    LDA (ptb), Y
\    INY                 \  Increase twice; we already have
\    INY                 \  the high byte
\    ADC wkspace, X      \
    
    
    
    
\    LDX #bdyL

    
    

    
\    LDA (ptb), Y        \  
\    INY
\    STA bdyL
\    LDA (ptb), Y        \  
\    INY
\    STA bdyB
\    LDA (ptb), Y        \  
\    INY
\    JSR split_nybble_XA
\    STA bdyB+1
\    STX bdyL+1
\    LDA (ptb), Y        \  
\    INY
\    STA bdyR
\    LDA (ptb), Y        \  
\    INY
\    STA bdyT
\    LDA (ptb), Y        \  
\    INY
\    JSR split_nybble_XA
\    STA bdyT+1
\    STX bdyR+1
        
    
.sch_plotmodes
    EQUW sch_move
    EQUW sch_draw
    EQUW sch_triangle
    EQUW sch_close
    EQUW sch_centre
    EQUW sch_circle_nj
    EQUW sch_circle
    EQUW sch_centre
    EQUW sch_centre
    EQUW sch_centre
    EQUW sch_centre
    EQUW sch_centre
    EQUW sch_centre
    EQUW sch_centre
    EQUW sch_centre
    EQUW term_marker

\.sch_plotmodes_L
\    EQUB sch_move MOD256
\    EQUB sch_draw MOD256
\    EQUB sch_triangle MOD256
\    EQUB sch_close MOD256
\    EQUB sch_centre MOD256
\    EQUB sch_circle_nj MOD256
\    EQUB sch_circle MOD256
\.sch_plotmodes_H
\    EQUB sch_move DIV256
\    EQUB sch_draw DIV256
\    EQUB sch_triangle DIV256
\    EQUB sch_close DIV256
\    EQUB sch_centre DIV256
\    EQUB sch_circle_nj DIV256
\    EQUB sch_circle DIV256

.tm_coords
    EQUB &E7:EQUB &19
    EQUB &32:EQUB &CE
    EQUB &CE:EQUB &00
    EQUB &32:EQUB &32


\  Sign and magnitude representation.  Bit 7 = 1 => negative
\                                      Bits 6-0 = value.
\  1 and -1 are handled specially, to keep this in range.

.alt_sines
    EQUB&00:EQUB&30:EQUB&5A:EQUB&75
.alt_cosines
    EQUB&7F:EQUB&75:EQUB&5A:EQUB&30
    EQUB&00:EQUB&B0:EQUB&DA:EQUB&F5
    EQUB&FF:EQUB&F5:EQUB&DA:EQUB&B0
\  Adding four bytes to the table is cheaper than any code that would
\  obviate the need for them ..... 
    EQUB&00:EQUB&30:EQUB&5A:EQUB&75

\  POWERS OF 10

.pwrs_10L
    EQUB 1
    EQUB 10
    EQUB 100
    EQUB 1000 MOD 256
.pwrs_10H
    EQUB 0
    EQUB 0
    EQUB 0
    EQUB 1000 DIV 256
    
\  ALTERNATIVE LEGEND MODES

.alt_lgdmodes
    EQUB &09 : EQUB &2B : EQUB &C8 : EQUB &EA

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\
\  THIS WILL EVENTUALLY BE IN A SEPARATE FILE SCHEMATIC_DATABASE.6502

\  PART RECORD AS UNPACKED INTO WORKSPACE

\  Type / no. subparts          1   n_subp  
\  Address of subparts          2   subp_a
\  No. of pins in whole part    1   w_pins
\  Addr. of pins in whole part  2   wpns_a
\  Address of back references   2   bkrf_a
\  No. of pins in subpart       1   n_pins  *
\  Address of pins              2   pins_a  *
\  No. of terminals in subpart  1   n_term  *
\  Address of terminals         2   term_a  *
\  Length of outline            1   outl_l  *
\  Address of outline           2   outl_a  *
\  Boundary left X co-ordinate  2   bdyL    *
\  Boundary bottom Y co-ord     2   bdyB    *
\  Boundary right X co-ordinate 2   bdyR    *
\  Boundary top Y co-ordinate   2   bdyT    *

\  THESE CAN GO HERE TILL WE HAVE MADE ROOM IN WS .....

\ ALIGN &100

\.n_subp	EQUB &00	\  Type / no. subparts          1
\.subp_a	EQUW &0000	\  Address of subparts          2
\.w_pins	EQUB &00	\  No. of pins in whole part    1
\.wpns_a EQUW &0000  \  Addr. of pins in whole part  2
\.bkrf_a	EQUW &0000	\  Address of back references   2
\.n_pins	EQUB &00	\  No. of pins in subpart       1
\.pins_a	EQUW &0000	\  Address of pins              2
\.n_term	EQUB &00	\  No. of terminals in subpart  1
\.term_a	EQUW &0000	\  Address of terminals         2
\.outl_l	EQUB &00	\  Length of outline            1
\.outl_a	EQUW &0000	\  Address of outline           2
\.bdyL	EQUW &0000	\  Boundary left X co-ordinate  2
\.bdyB	EQUW &0000	\  Boundary bottom Y co-ord     2
\.bdyR	EQUW &0000	\  Boundary top Y co-ordinate   2
\.bdyT	EQUW &0000	\  Boundary top Y co-ordinate   2



.graphics_end

